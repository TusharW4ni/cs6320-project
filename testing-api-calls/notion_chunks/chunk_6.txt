While this procedure is helpful to try the API, you shouldn't ask users to do this for your integration . It's more common for an integration to receive a page ID by calling the search endpoint . The properties parameter is an object which describes the page properties. Let's use a simple example with only the required title property: JavaScript { "Name": { "type": "title", "title": [{ "type": "text", "text": { "content": "A note from your pals at Notion" } }] } } ðŸ“˜ Page properties within a database Pages within a database parent require properties to conform to the database's schema. Follow the working with databases guide for an in-depth discussion with examples. The children parameter is a list of block objects which describe the page content. Let's use some sample content: JavaScript [ { "object": "block", "type": "paragraph", "paragraph": { "rich_text": [{ "type": "text", "text": { "content": "You made this page using the Notion API. Pretty cool, huh? We hope you enjoy building with us." } }] } } ] ðŸ“˜ Size limits When creating new blocks, keep in mind that the Notion API has size limits for the content. Using all three of the parameters, we create a page by sending a request to the endpoint . cURL JavaScript curl -X POST https://api.notion.com/v1/pages \ -H 'Authorization: Bearer '"$NOTION_API_KEY"'' \ -H "Content-Type: application/json" \ -H "Notion-Version: <<latestNotionVersion>>" \ --data '{ "parent": { "page_id": "494c87d0-72c4-4cf6-960f-55f8427f7692" }, "properties": { "title": { "title": [{ "type": "text", "text": { "content": "A note from your pals at Notion" } }] } }, "children": [ { "object": "block", "type": "paragraph", "paragraph": { "rich_text": [{ "type": "text", "text": { "content": "You made this page using the Notion API. Pretty cool, huh? We hope you enjoy building with us." } }] } } ] }' const { Client } = require('@notionhq/client'); const notion = new Client({ auth: process.env.NOTION_API_KEY }); (async () => { const response = await notion.pages.create({ parent: { page_id: '494c87d072c44cf6960f55f8427f7692', }, properties: { title: { type: 'title', title: [ { type: 'text', text: { content: 'A note from your pals at Notion', }, }, ], }, }, children: [ { object: 'block', type: 'paragraph', paragraph: { text: [ { type: 'text', text: { content: 'You made this page using the Notion API. Pretty cool, huh? We hope you enjoy building with us. ', }, }, ], }, }, ], }); console.log(response); })(); Once the page is added, you'll receive a response containing the new page object . Take a look inside Notion and view your new page. Reading blocks from a page Page content can be read from a page using the retrieve block children endpoint. This endpoint returns a list of children for any block which supports children. While pages are a common starting point for reading block children, you can retrieve the block children of other kinds of blocks, too. The block_id parameter is the ID of any existing block. If you're following from the example above, the response contained a page ID.